{
  "name": "mrg5-manager-backend",
  "version": "1.0.0",
  "type": "module",
  "description": "- **What we will build** \t- we will extend this project in which we built a full-stack MERN app running at Netlify (frontend), Heroku (backend) connecting to an online database (MongoDB Atlas):  \t\t- [Create full-stack MERN site published at Heroku/Netlify saving data to MongoDB Atlas](https://edwardtanguay.netlify.app/howtos?id=588) \t- the final state of this project was that we could visit the site at Netlify, which fetched data from the Heroku API, which in turn fetched data from MongoDB Atlas:##tehonlinefinished \t- the task we will accomplish in this howto is: \t\t- when a user comes to this page, they are not allowed to see the job sources  \t\t- instead they see a login form \t\t- if they login successfully, they able to view the information for 20 seconds \t\t- after 20 seconds are expired, they are logged out and they have to log in again to see the information \t\t\t- (20 seconds is of course for demonstration purposes, one can change this to any length of time later and keep a user logged in when they movement on the site, but the important aspect here is that our JWT tokens at some point expire which increases the security of our site) \t\t\t- after implementing login, the site looks like this:##howlookforsjwt \t- note that after successful login, **the user can refresh the page and stay logged in** \t\t- this is accomplished via a **maintain-login** route which sends the JWT token back \t- we will keep this site one page for the time being \t\t- the user object returned from a successful login will be saved in a variable in React \t\t- if the user object exists, only then will another fetch be called to get the sensitive data, in our case the job sources - **What we will use:** \t- Node/React \t- JWT \t- Postman \t- VSCode REST Client",
  "main": "index.js",
  "scripts": {
    "dev": "nodemon server.js",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "nodemon": "^2.0.19"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.0.1",
    "express": "^4.18.1",
    "jsonwebtoken": "^8.5.1",
    "mongoose": "^6.4.4"
  }
}
